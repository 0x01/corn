
(** Definition of [csetoid_rewrite]: a rewrite tactic for setoid equality; 
it rewrites within formulae of type [Prop] and [CProp], built up from 
connectives [->], [and], [CAnd], [or], [COr], [iff], [Iff], [not], [Not], 
[CNot], and atomic formulae [(P t)], [(R t s)], [t[=]s], [t[#]s] for 
[T:CSetoid], [t,s:T], [P:(CSetoid_predicate T)], [R:(CSetoid_relation T)], 
[R:(CCSetoid_relation T)]. Note that atoms are built up from predicates and 
relations that are well-defined with respect to setoid equality.

Setoid terms of type [T] are terms constructed by [(f s)], [(g s s')], 
[(h s s_)], where [f:(CSetoid_fun S T)], [g:(CSetoid_bin_fun S S' T)], 
[h:(CSetoid_part_fun S T)], [s:S], [s':S'], [s_:(cspf_dom S T f s)];
needless to say, those setoid functions respect setoid equality.

Tactic [csetoid_rewrite] is composed of tactics [total_csetoid_rewrite] and 
[partial_csetoid_rewrite]. The former is applied in case there are no partial 
setoid functions present in the goal. The latter if there are. We further 
explain this separation. 

To define the rewrite tactic we use the method of reflection, see [1].
Because we have to deal with partial functions (see the definition of 
[CSetoid_part_fun] in file [CSetoids.v]), we use %\emph{partial}%
#<em>partial</em># reflection, see [2]. Partial reflection means to have an
interpretation %\emph{relation}%#<em>relation</em># instead of an 
interpretation function.

Unfortunately, we were unable to define our tactic for the most general case,
that is, for terms that contain both partial functions as well as setoid 
functions whose domain(s) and co-domain are not necessarily the same.
When proving lemmas involving statements [e II^r t] (saying [t] is an 
interpretation of syntactic expression [e] under the variable assigment [r], 
one often needs to reason by induction over [e] and then inverting the so 
obtained instances of the inductively defined [e II^rho t]. However, in the 
general case where we have to deal with functions whose domain and co-domain 
differ, inversion doesn't yield the desired result. Consider, for instance, 
[var II^r t]. Here, we want to perform inversion and obtain [t=r], for
[var II^r r] is a defining clause of [II] and moreover the only one mentioning
[var]. However, inversion returns somthing like [<p,t> = <p,r>]. 
This has got to do with the so-called elimination predicate which predicts 
the type of the outcome of a case analysis dependent on the destructed 
variable. For more info ask the author and see his related
#<a href="http://pauillac.inria.fr/pipermail/coq-club/2003/001127.html"> 
mail</a># to the coq-club.

We opted for the next best option of using two tactics, one using total 
reflection, its application being restricted to terms constructed 
from total functions (domain(s) and co-domain are allowed to be distinct).
The other using partial reflection, its application being restricted to
terms built up from (partial as well as total) %\emph{operations}%
#<em>operations</em># (i.e.%\% functions whose domain(s) and co-domain are 
equal).

References:

[1] Boutin, "Using Reflection to Build Efficient and Certified Decision 
Procedures", TACS, LNCS 1281, pp.%\% 515--529, 1997.

[2] Geuvers, Wiedijk and Zwanenburg, "Equational Reasoning via Partial 
Reflection", TPHOLs, LNCS 1896, pp.%\% 162--178, 2000.
*)


to be done's:

- (* tbd: new CSetoids.v: *), PartFunct....



- don't use syntax in match expressions

- use variable atoms?
 (don't like the hardwired constructors of csetoid_fun *_wd etc.)

- reflect prop's as well
- remove body of y_ (that si, proof that y is in the domain)
- complete the set of repl, cxt, rev versions
- for setoids too!?
- tac without reflexion

- motivate reflexion
- technical report
- add to personal site


some remarks:

- 200904: auto translated from version 7 => a lot ugly and redundant identifiers

- 200904: i avoided the use of the implicit agruments mechanism,
because, in my experience, it is not robust enough.
moreover, things defined here are to be used by the tactic only, 
and not by human users (apart from me).

- 200904: improvements and cleanings started today!

- 200904: first experimental version submitted to corn; 
things need to be improved and cleaned up!
 
- 110204: renamed setoid_rewrite into csetoid_rewrite 
in order to avoid name clashes with setoid_rewrite 
in Coq's initial environment.
