________________________________________________________________
*** to be done / found out / discussed / reported ***
________________________________________________________________

- (forall P, Finite A[|]P) -> Finite A

- consider the def of subsetoids to take a setoid predicate!

- define record for setoid functions of arbitrary arity 

- There are situations where the setoid arguments of [fun_wd],
here set to be implicit, cannot be inferred from the function type:
[(S_crr S1)->(S_crr S2)]. 
In particular, Coq infers [S2 = B] given a function whose co-domain
is subsetoid_crr B P, whereas [B[|]P] is intended.

- (vague!:) a wonderful tactic that lets the proof follow 
the definition of the function you are proving things about ...

- solve coercion problem (report coqclub, see file coercshit.v)
  we never want to write Setoid_predicate or Setoid_fun !
  

- We want to construct the Setoid of Setoids,
where the equivalence relation is being isomorphic
However isomorphic : Setoid -> Setoid -> CProp,
whereas the expected type (by Build_Setoid) is Setoid -> Setoid -> Prop

so change the def of setoids!

Lemma isomorphic_reflexive :
  Reflexive isomorphic.

- Dan prefers to axiomatize what it is to be, e.g., isomorphic
and therewith abstract away from the actual definition.
Then we should follow this policy for all notions.
Is this doable? Will it work nicely? 
Are there situations where we actually want to compute 
using concrete defs? Etc.

- setoid of setoids can't be done?

- possible to overload notation? e.g. use A[->]Prop as well as A[->]B
where A,B are setoidds

- check levels of notations 

- would using left and right inverse properties instead of bijections
make life easier?

- update / improve doc in Setoids.v and SetoidFun.v

- consider creating a preliminaries.v instead of putting all in 
  CLogic.v

- Setoids.v : move [Implicit Arguments Treflexive] etc. to 
  CLogic.v (or other prelim file)

- use gobal Implicit Arguments globally

- remove SpecReals-stuff (obsolete according to freek)

- Setoids.v : move fun stuff to CSetoid_Fun.v 
  (belongs together conceptually)

- remove *_unfolded stuff (obsolete)

- Setoid_Fun.v : BinPartFun : misleading name, not binary 
  (just polym.)

- naming conventions, e.g. the names of record fields

- doc is `too light', imported modules, declared variables 
  and tactic defs are hidden (begin show - end show overrides)

- tactic notation, does it work?

________________________________________________________________
*** done ***
________________________________________________________________

- Setoids.v : the setoid variable S of s_eq is explicit if
  we reason about (s_eq S) and implicit if we use the syntax,
  as in x [=] y

________________________________________________________________
*** remarks ***
________________________________________________________________

- the name bin_op_wd_unfolded and the like are misleading 
  for they are not convertible with bin_op_wd but 
  instead with its inhab. csbf_wd

- but is the step-tactic still working?
