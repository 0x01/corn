
=== To bundle or not to bundle? (Or: What to bundle?) ===

How should we define reflexive, transitive, and symmetric relations?

Naively, we might define:

  Record ReflexiveRelation: Type :=
    { rr_carrier: Type
    ; rr_rel: rr_carrier → rr_carrier → Prop
    ; rr_proof: Π x, rr_rel x x }.

and similar for transitive and symmetric relations.

With this approach, tragedy strikes when we try to define EquivalenceRelation in terms of ReflexiveRelation and its two siblings, because when we start by positing three objects of type ReflexiveRelation, TransitiveRelation, and SymmetricRelation, we then have to add equalities expressing that they talk about the same carrier and relation, and these equalities are a nightmare to work with (because the three carriers and relations won't be convertible).

A step in the right direction would be to define ReflexiveRelation as:

  Record ReflexiveRelation (carrier: Type): Type :=
    { rr_rel: rr_carrier → rr_carrier → Prop
    ; rr_proof: Π x, rr_rel x x }.

This would solve the problem for the carrier, but EquivalenceRelation would still need equalities for the relation:

  Record EquivalenceRelation: Type :=
    { er_carrier: Type
    ; er_rel: er_carrier → er_carrier → Prop
    ; er_refl: ReflexiveRelation er_carrier
    ; er_sym: SymmetricRelation er_carrier
    ; er_trans: TransitiveRelation er_trans
    ; same_rel: rr_rel er_refl = sr_rel er_sym
    ; same_rel': rr_rel er_refl = tr_rel er_trans }.

The logical solution is to pull the relation out of ReflexiveRelation (and its siblings) as well:

  Record ReflexiveRelation (carrier: Type) (rel: carrier → carrier → Prop): Prop :=
    { rr_proof: Π x, rr_rel x x }.

or equivalently:

  Definition ReflexiveRelation (carrier: Type) (rel: carrier → carrier → Prop): Prop :=
    Π x, rr_rel x x.

This is how "reflexive" is defined in the standard library, and this is entirely sensible.

The change from Type to Prop reflects the fact that ReflexiveRelation is now strictly a property, proofs of which can be nicely kept opaque.

This then lets us define:

  Record EquivalenceRelation: Type :=
    { er_carrier: Type
    ; er_rel: er_carrier → er_carrier → Prop
    ; er_refl: ReflexiveRelation er_carrier er_rel
    ; er_sym: SymmetricRelation er_carrier er_rel
    ; er_trans: TransitiveRelation er_trans er_rel }.

But looking at EquivalenceRelation, we see that it now essentially has the same form as the original naive ReflexiveRelation record we started with. Clearly, being an equivalence relation and being a reflexive relation are very much analogous concepts, and by exactly the same argument we conclude that EquivalenceRelation should really be defined as:

  Record EquivalenceRelation (er_carrier: Type) (er_rel: er_carrier → er_carrier → Prop): Prop :=
    { er_refl: ReflexiveRelation er_carrier er_rel
    ; er_sym: SymmetricRelation er_carrier er_rel
    ; er_trans: TransitiveRelation er_trans er_rel }.

After all, it is not that big a leap to suppose we might at some point wish to consider a type with two different equivalence relations defined on it, or an equivalence relation which also happens to be an instance of some other concept (like being a morphism over some other setoid) (this occurs when you define quotients over setoids, for instance).

At the risk of overstressing the point, let us look at how the same problem and solution keep appearing in composite structures. Suppose we use a definition of Monoid that bundles the relation. Then if we proceed to define SemiRing as a double Monoid, we face a dilemma:

  Record SemiRing A: Type :=
    { mult_monoid: Monoid A (* contains an equivalence relation *)
    ; plus_monoid: Monoid A (* contains an equivalence relation, hopefully the same *)
    ; plus_comm: Commutative (mon_op plus_monoid)
    ; mult_comm: Commutative (mon_op mult_monoid)
    ; mult_0_l: Π x: A, ... which equality do we use here, mult_monoid's or plus_monoid's?!

Again, for this definition to be usable at all, we would need to add an equality expressing that the two monoids contain the same equivalence relation. And again, the proper solution is to change Monoid and unbundle the relation. But here, we have a choice as to how much exactly we unbundle. (For the moment we ignore the question of whether the unit and binary operator should be unbundled as well, focusing only on the equivalence relation and its equivalence proof.)

We /could/ become over-eager and decide to unbundle the equivalence proof term as well:

  Record Monoid (A: Type) (R: A→A→Prop) (e: Equivalence R) ... possibly more stuff ... : Type := ...

However, this way if we happen to have two proofs P and Q that a certain relation is an equivalence, we end up with two non-convertible ways to express that the relation (together with some unit and binary operation) form a Monoid: "Monoid A R P ..." and "Monoid A R Q ...". We must either try to deal with this (by proving that Monoid proofs with different Equivalence proofs are interchangable, and praying we can get automation such as type class instance resolution to use them interchangably), or take great care to ensure that Equivalence proof terms are always shared, essentially elevating them to "values", which goes very much against the principle of proof irrelevance.

Neither of these options are very appealing. We really should just make Monoid take as parameters only the operations/relations. If we treat the monoid's unit and binary operation the same way, this means that Monoid ends up in Prop, and that its instances can be left opaque, which is really how things ought to be.

We remark that leaving the equivalence proofs bundled means that when one has a proof that something is a semiring, one has two proofs (via the two monads) that the equivalence relation is an equivalence. Fortunately, having redundant proofs like this is entirely harmless when one's terms never refer (directly or indirectly) to proofs, which is the case when the relations and operations they are composed of are left unbundled. Here, too, we enjoy the warm embrace of proof irrelevance.

From the discussion so far, we derive some principles:
1. structural concepts (like Reflexive, Setoid, Monoid) should have their structural components (i.e. carriers, relations, and operations) as parameters, and nothing else;
2. (as a consequence) these concepts should be defined as predicates (which includes records and classes living in Prop), and their proofs may be kept opaque;
3. (as a second consequence) algebraic expressions should never refer (directly or indirectly) to proofs.

This list will grow in subsequent sections.

The principles listed so far are not particularly controversial. For instance, \cite{bla} acknowledges that this approach ensures maximum flexibility. However, there is a common perception that unbundling carriers, relations, and operations this way invariably leads either to unmanagably big algebraic expressions (involving endless projections and/or implicit arguments), or to unmanageably long and tedious enumeration of carriers/relations/operations, or to problems establishing canonical names for operations (since we no longer project them out of structure instances all the time).

In the next sections, we show how systematic use of type classes (and their support infrastructure in Coq), combined with the use of a special form of type class we call an "operational type class" (as opposed to a "structural" type class we might use in place of the records shown thus far), lets us forgo these problems.

=== Managing unbundled structure with type classes ===

So far, we have only looked at the definitions of the structures themselves, and have not yet considered the perspective of someone trying to prove some theorems about these abstract structures. The ideal we would approximate is that of the common mathematical vernacular, where one simply says: "for x, y, z in a semigroup G, x * y * z = z * y * x".

Suppose we have defined SemiGroup in line with the aforementioned principles:

  Record SemiGroup (A: Type) (eq: A→A→Prop) (op: A→A→A): Prop := ...

Then our starting point is the obvious but awful:

  Lemma bla A eq op (P: SemiGroup A eq op) x y z: eq (op (op x y) z) (op (op z y) x).

As a first cleaning measure, we might hope to introduce some notations to let us use infix notation for the semigroup operator (say, "&") and for equality. Unfortunately, at this point the names "eq" and "op" are just local names and there is no way to predeclare that they are to be associated with any notation. What we really need are canonical names for these notions, so that we may fashion notations for them.

This is a typical job for type classes, and they are used in this way in the Clean standard library (todo: reference). We simply follow suit:

  Class Equiv A := equiv: relation A.
  Class SemiGroupOp A := sg_op: A → A → A.

  Infix "=" := equiv: type_scope.
  Infix "&" := sg_op (at level 50, left associativity).

These single-field type classes are given special treatment in that they are not translated into records the way classes with any other number of fields are, but are instead turned into ordinary definitions. The effect of this is that "Equiv A" immediately reduces to "relation A", and that the equiv "projection" is the identity function whose argument is inferred using instance resolution. Thus, for a very modest cost in indirection, we gain the ability to use canonical names, and with it, notations:

  Record SemiGroup (A: Type) (eq: Equiv A) (op: SemiGroupOp A): Prop := ...

  Lemma bla A eq op (P: SemiGroup A eq op) x y z: x & y & z = z & y & x.

We call these type classes "operational type classes".

It is important to point out that although the expression now /looks/ like it is bound to some specific semigroup structure (which with traditional approaches would imply projections from bundles and/or reference to proofs), it is really only referring near-directly to the actual operations involved, with the semigroup proof existing only as opaque "knowledge about the operations" which we may use in the proof. This lack of projections keeps our terms small and independent, and keeps rewriting simple and sane.

On the other hand, it /does/ mean that all the carriers/relations/operations end up in the context. While we are not particularly worried about overly large contexts (we feel that this will most likely not be problematic for any but the most complex formalizations), having to /declare/ these entities (like eq and op for bla) /is/ a bit of a chore. Fortunately, Coq provides a feature called implicit generalization, which is exactly what we need. (todo: describe how it works) With it, we can write bla as follows:

  Lemma bla `(SemiGroup A) x y z: x & y & z = z & y & x.

Thus, we have reached the mathematical ideal we aimed for.

Let us now stop and think to what extent this approach suffers from all the problems commonly associated with it. In particular, let us imagine what happens to our terms and contexts when we want to talk about nested structures such as polynomials over matrices over rings. TODO: hm, better do this as part of a discussion about interfaces for numbers and multi-level implementation substitution.
