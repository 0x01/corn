# Copyright © 1998-2009
# Henk Barendregt
# Luís Cruz-Filipe
# Herman Geuvers
# Mariusz Giero
# Rik van Ginneken
# Dimitri Hendriks
# Sébastien Hinderer
# Cezary Kaliszyk
# Bart Kirkels
# Pierre Letouzey
# Iris Loeb
# Lionel Mamane
# Milad Niqui
# Russell O’Connor
# Randy Pollack
# Nickolay V. Shmyrev
# Bas Spitters
# Dan Synek
# Freek Wiedijk
# Jan Zwanenburg
# 
# This work is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This work is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along
# with this work; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

## Prologue. Don't touch unless you know what you are doing.
## User-changeable values after prologue

ifndef TOPDIR
 $(error "You need to tell me what the top-level directory of CoRN is. Please set TOPDIR.")
endif
ifndef COQTOP
 $(error "You need to tell me where Coq is installed. Please set COQTOP.")
endif
ifndef SSRDIR
 $(error "You need to tell me what the top-level directory of Ssreflect is. Please set SSRDIR.")
endif

ifeq ($(TOPDIR),.)
 SRCDIR := $(shell pwd)
else
 SRCDIR := $(shell pwd)/$(TOPDIR)
endif

# We are using many bashisms all around
SHELL:=bash -O nullglob

# realpath utility to use
REALPATH := $(shell if ! type -p realpath 2>/dev/null; then $(MAKE) -f "$(SRCDIR)/Makefile.realpath" -s TOPDIR="$(TOPDIR)" realpath; echo "$(SRCDIR)/bin/realpath"; fi)

SRCDIR:=$(shell "$(REALPATH)" "$(SRCDIR)")

## End of prologue
## User-configurable variables

# OCaml to use
OCAMLC ?= ocamlc
OCAMLOPT ?= ocamlopt
#coqdoc to use
COQDOC ?= $(COQBIN)/coqdoc

# Placement and names of executables we build
BINDIR := $(SRCDIR)/bin
LIBDIR := $(SRCDIR)/lib
TOPLEVELNAME := corntop
COMPILERNAME := cornc
IDENAME := cornide
INTERFACENAME := CoRN-interface

# Library name used internally by coq
LIBNAME ?= CoRN

# Directories and files that should not be distributed (i.e. part of the 
# publicly available version of C-CoRN)
PRIVFILES := 

# Directories containing Coq files. These _must_ be relative to the top-level directory
# of CoRN. Use the "devel" variable for things outside of the CoRN hierarchy.
COQ_HIERARCHIES := algebra complex coq_reals fta ftc logic metrics model raster reals tactics transc order metric2 Liouville CayleyHamilton

# Files to filter out of the tree.pdf diagra
#TREE_FILTER := coq_reals/ model/
TREE_FILTER := 

# Directory that will contain the html version of the documentation
HTMLDIR := $(SRCDIR)/doc/html
# Directory that contains the postscript versionofthe doc:
PSDIR := $(SRCDIR)/doc
# Name of file containing postscript documentation
PSFILE := doc.ps

# File containing the partial order given by coqdep for documentation
DOCDEPEND := $(SRCDIR)/.docdepend
# File containing a list of files that must be processed by coqdoc
DOCLIST := $(SRCDIR)/.doclist

# File where coqc stores the references to global symbols
GLOBFILE = $(SRCDIR)/.glob

## End of user-configurable variables
## Please don't edit beyond this line, unless you really know what you are doing

# Various executables we build when we need a custom Coq image.
# (Thus currently not.)
TOPLEVEL := $(LIBDIR)/$(TOPLEVELNAME)
BINARIES:=$(BINDIR)/$(TOPLEVELNAME) $(BINDIR)/$(COMPILERNAME) $(BINDIR)/$(IDENAME) $(BINDIR)/$(INTERFACENAME)
LIBEXECS:=$(LIBDIR)/$(TOPLEVELNAME) $(LIBDIR)/$(COMPILERNAME)
IDELIB:=$(LIBDIR)/$(IDENAME)
IDEBIN:=$(BINDIR)/$(IDENAME)

# Coq directories
COQ_PRIMITIVE_DEVEL_DIRS := $(shell if [ -n "$(devel)" ]; then for d in $(devel); do \
	echo "`$(REALPATH) $${d}` "; done; fi)
COQ_PRIMITIVE_DIRS := $(shell for d in $(COQ_HIERARCHIES:%=$(SRCDIR)/%); do if [ -d $${d} ]; then echo "`$(REALPATH) $${d}` "; fi; done)
COQDIRS := $(shell find $(COQ_PRIMITIVE_DIRS) $(COQ_PRIMITIVE_DEVEL_DIRS) '(' -name CVS -or -name '{arch}' -or -name .arch-ids -or -name .svn -or -name _darcs ')' -prune -or -type d -print )
COQSOURCES := $(shell find $(COQDIRS) -maxdepth 1 -name '*.v' -not -name 'Transparent_*' -not -name 'Opaque_*')

# tools
COQBIN ?= $(COQTOP)/bin
CAMLP4LIB:=`camlp4 -where`
CAMLP4EXTEND:=pa_extend.cmo pa_ifdef.cmo q_MLast.cmo
COQSRC:=-I $(COQTOP)/kernel -I $(COQTOP)/lib \
  -I $(COQTOP)/library -I $(COQTOP)/parsing \
  -I $(COQTOP)/pretyping -I $(COQTOP)/interp \
  -I $(COQTOP)/proofs -I $(COQTOP)/syntax -I $(COQTOP)/tactics \
  -I $(COQTOP)/toplevel -I $(COQTOP)/contrib/correctness \
  -I $(COQTOP)/contrib/extraction -I $(COQTOP)/contrib/field \
  -I $(COQTOP)/contrib/fourier -I $(COQTOP)/contrib/graphs \
  -I $(COQTOP)/contrib/interface -I $(COQTOP)/contrib/jprover \
  -I $(COQTOP)/contrib/omega -I $(COQTOP)/contrib/romega \
  -I $(COQTOP)/contrib/ring -I $(COQTOP)/contrib/xml \
  -I $(CAMLP4LIB)
COQC := $(COQBIN)/coqc
COQIDE := $(SSRDIR)/bin/ssrcoqide
COQDEP := $(COQBIN)/coqdep
COQMKTOP := $(COQBIN)/coqmktop
GRAMMARS:=grammar.cma
PP:=-pp "camlp4o -I $(SRCDIR)/tactics -I $(COQTOP)/parsing $(CAMLP4EXTEND) $(GRAMMARS) -impl"

# COQMAP defines the mapping between physical and logical directories
COQMAP:= $(shell for d in $(COQ_PRIMITIVE_DEVEL_DIRS); do echo -R "$${d}" CoRN .devel; done) $(shell for d in $(COQ_PRIMITIVE_DIRS); do echo -R "$${d}" CoRN.$$(basename "$${d}"); done)
OTHERFLAGS = -I $(SRCDIR)/tactics -I $(SSRDIR)/theories $(COQMAP)
COQFLAGS = $(COQ_XML) $(OPT) $(OTHERFLAGS)
COQCFLAGS = -image $(SSRDIR)/bin/ssrcoq
COQDOCFLAGS = --toc -s -t "C-CoRN Documentation" $(COQMAP) \
  --glob-from $(GLOBFILE) -g -l --multi-index --files-from $(DOCLIST)
COQDEPFLAGS := $(shell echo $(COQDIRS) | awk -v RS=' ' -v ORS=' ' -v pwd="`pwd`" '{ if ( $$1 != pwd ) print "-I " $$1}')
COQOBJECTS := $(COQSOURCES:.v=.vo)
COQGLOBS := $(COQSOURCES:.v=.glob)
DEPEND := $(COQSOURCES:.v=.d)
CAMLSOURCES := $(shell find $(SRCDIR)/tactics -name '*.ml')
CAMLOBJECTS := $(CAMLSOURCES:.ml=.cmo)
CMX := $(CAMLSOURCES:.ml=.cmx)

COQCDEP_EX:=$(shell [ -x "$(COQDEP)" ] && [ -x "$(COQC)" ]; echo "$$?")
ifneq "$(COQCDEP_EX)" "0"
$(error coqc or coqdep not found or not executable. Please set COQTOP to the appropriate value)
endif

# Declaration of rules that have no target (i.e. .PHONY rules)
.PHONY : dep clean depclean distclean doc-clean showcommands doc-pre binaries binaries-clean lib-clean human ide makefiles

ifdef CoRN_MF_sub
all : $(COQOBJECTS)
else
all :
	exec $(MAKE) CoRN_MF_sub=1 all
endif

# Convenience utilities for humans
ide : $(IDEBIN) human

human : makefiles binaries

AUTO_MAKEFILES := $(patsubst %,%/Makefile,$(COQDIRS))

makefiles : $(AUTO_MAKEFILES)

$(AUTO_MAKEFILES) : 
	@set -e; if ! [ -a $@ ]; then \
	  depth=$$(echo '$(patsubst $(SRCDIR)/%,%,$@)' | awk '{ print gsub("/","/") }'); \
	  model="$(SRCDIR)/Makefile.auto.$${depth}"; \
	  if ! [ -a "$${model}" ]; then \
	    ( echo -n 'TOPDIR=..'; i=1; \
	      while [ "$${i}" -lt "$${depth}" ]; do echo -n "/.."; i=$$(( $${i} + 1 )); done; \
	      echo; echo; echo 'include $$(TOPDIR)/Makefile.common' \
	    ) > "$${model}"; \
	  fi; \
	  ln "$${model}" "$@"; \
	fi

# Real rules

$(BINDIR) $(LIBDIR):
	mkdir --parents "$@"

binaries: $(BINARIES)

binaries-clean:
	rm -f $(BINARIES) $(IDEBIN)
	if [ -d "$(BINDIR)" ]; then rmdir --ignore-fail-on-non-empty "$(BINDIR)"; fi

lib-clean:
	rm -f $(LIBEXECS) $(IDELIB)
	if [ -d "$(LIBDIR)" ]; then rmdir --ignore-fail-on-non-empty "$(LIBDIR)"; fi

$(IDELIB): $(CMX) | $(LIBDIR)
	@echo Building coq-ide top-level $(subst $(SRCDIR)/,, $@)
	@$(COQMKTOP) -ide -srcdir $(COQTOP) -ide -opt -o $@ $(CMX)

$(IDEBIN): | $(BINDIR)
	@echo Building coq-ide top-level startup script
	@set -e; ( \
	  echo '#!/bin/sh'; \
	  echo 'exec "$(COQIDE)" $(COQFLAGS) "$$@"' \
	  ) > $@; chmod +x $@

$(LIBDIR)/$(TOPLEVELNAME): $(CMX) | $(LIBDIR)
	@echo Building top-level $(subst $(SRCDIR)/,,$@)
	@$(COQMKTOP) -srcdir $(COQTOP) -opt -o $@ $(CMX)

$(BINDIR)/$(TOPLEVELNAME): | $(BINDIR)
	@echo Building top-level startup script
	@set -e; ( \
	  echo '#!/bin/sh'; \
	  echo 'exec "$(COQBIN)/coqtop" $(COQFLAGS) "$$@"' \
	  ) > $@; chmod +x $@

$(BINDIR)/$(INTERFACENAME): | $(BINDIR)
	@echo Building interface top-level startup script
	@set -e; ( \
	  echo '#!/bin/sh'; \
	  echo 'exec "$(COQBIN)/coq-interface" $(COQFLAGS) "$$@"' \
	  ) > $@; chmod +x $@

$(LIBDIR)/$(COMPILERNAME): | $(LIBDIR) $(LIBDIR)/$(TOPLEVELNAME)
	@echo Building compiler $(subst $(SRCDIR)/,, $@)
	@set -e; ( \
	  echo '#!/bin/sh'; \
	  echo 'exec $(COQC) $(COQCFLAGS) "$$@"' \
	  ) > $@; chmod +x $@

$(BINDIR)/$(COMPILERNAME): | $(BINDIR)
	@echo Building compiler startup script
	@set -e; ( \
	  echo '#!/bin/sh'; \
	  echo 'exec "$(COQC)" $(COQFLAGS) "$$@"' \
	  ) > $@; chmod +x $@

%.cmx : %.ml
	@echo Compiling $<
	@$(OCAMLOPT) -c $(COQSRC) $(PP) $<

%.cmo : %.ml
	@echo Compiling $<
	@$(OCAMLC) -c $(COQSRC) $(PP) $<

ifdef CoRN_MF_sub
$(GLOBFILE): $(COQGLOBS) $(DOCLIST)
	cat $$(sed 's/\.v$$/.glob/' < "$(DOCLIST)" ) > "$@"

%.vo %.glob : %.v | %.d
	@set -e; \
	echo "Compiling $<"; \
	GLOB="$(<:.v=.glob)"; \
	$(COQC) $(COQFLAGS) -dump-glob "$${GLOB}" $(COQCFLAGS) $<
else
.PHONY: always

$(GLOBFILE): always $(DOCLIST)
	exec $(MAKE) CoRN_MF_sub=1 "$@"

%.vo %.glob: always
	@set -e; \
	canonicalise () \
	{ \
	  if [ -a "$$1" ]; then \
	    $(REALPATH) "$$1"; \
	  else \
	    echo "$$($(REALPATH) $$(dirname "$$1"))/$$(basename "$$1")"; \
	  fi \
	}; \
	canon_name="$$(canonicalise "$@")" ; \
	exec $(MAKE) CoRN_MF_sub=1 "$${canon_name}"
endif

dep : $(DEPEND) $(DOCDEPEND)

%.d: %.v
	@set -e; \
	canonicalise () \
	{ \
	  if [ -a "$$1" ]; then \
	    $(REALPATH) "$$1"; \
	  else \
	    echo "$$($(REALPATH) $$(dirname "$$1"))/$$(basename "$$1")"; \
	  fi \
	}; \
	canon="`canonicalise $<`"; \
	canond="$$(echo $${canon} | sed 's/\.v$$/.d/')"; \
	$(COQDEP) $(COQDEPFLAGS) "$${canon}" \
	| sed 's/\(.*\)\.vo[[:space:]]*:/\1.vo \1.glob:/' \
	> "$${canond}" || ( RV=$$?; rm -f "$${canond}"; exit "$${RV}" )

$(DOCDEPEND) : $(DEPEND)
	@echo Calculating documentation dependencies
	@set -e; IFS=$$' \t\n:'; cat $(DEPEND) | \
	( while read binary glob source depends; do \
	  if [ -n "$${binary}" ]; then \
	    for depend in $${depends}; do \
	      if echo "$${depend}" | egrep -q '\.vo$$'; then \
	        echo "`echo $${depend} | sed 's/\.vo$$/.v/'` $${source}"; \
	      fi; \
	    done; \
	  fi; \
	done ) > $@ || ( RV=$$?; rm -f $@; exit $${RV} )

tree.dot : PreDot.hs $(DEPEND)
	cat $(DEPEND) | runhaskell PreDot.hs $(TREE_FILTER) > $@ 

tree.svg : tree.dot
	dot -Tsvg < $< > $@

tree.ps : tree.dot
	dot -Tps < $< > $@

tree.pdf : tree.ps
	epstopdf $<

# Rules to create documentation depend on the whole compilation process
# because they need the glob file to generate global references.

$(DOCLIST) : $(DOCDEPEND) $(SRCDIR)/doc/extradeps
	( ( while read small big; do echo "$$( $(REALPATH) $(SRCDIR)/$${small} ) $$( $(REALPATH) $(SRCDIR)/$${big} )"; done ) < $(SRCDIR)/doc/extradeps ; cat $(DOCDEPEND) ) | tsort > $@ || ( RV=$$?; rm -f $@; exit $${RV} )

doc-pre : $(DOCLIST) $(GLOBFILE)

doc-ps : doc-pre
	$(COQDOC) $(COQDOCFLAGS) --ps -o $(PSDIR)/$(PSFILE) -p '\input{$(SRCDIR)/doc/doc_coqdocpre}'

doc-html : doc-pre
	mkdir -p $(HTMLDIR)
	cp $(SRCDIR)/doc/style.css $(HTMLDIR)
	$(COQDOC) $(COQDOCFLAGS) -d $(HTMLDIR)

doc : doc-ps doc-html tree.svg

clean : depclean binaries-clean lib-clean doc-clean
	find $(SRCDIR) '(' -name '*.cm[oix]' -or -name '*.[go]' -or -name '*.glob' -or -name '*.v[oi]' -or -name '*~' -or -name '.*~' ')' -print0 | xargs --null rm -f
	set -e; for m in $(SRCDIR)/Makefile.auto.*; do \
	  ls -i "$${m}" | ( read inode bitbucket; find $(SRCDIR) '(' -xdev -inum "$${inode}" ')' -print0 | xargs --null rm -f ); \
        done
	rm -f $(GLOBFILE)
	$(MAKE) -C $(SRCDIR)/tools/depend clean
	$(MAKE) -f $(SRCDIR)/Makefile.realpath TOPDIR="$(TOPDIR)" clean

depclean : 
	rm -f $(DEPEND) $(DOCDEPEND)

distclean : clean
	for i in $(PRIVFILES); do rm -rf "$$i"; done

doc-clean :
	rm -rf $(HTMLDIR) $(PSDIR)/$(PSFILE) $(DOCLIST)

showcommands :
	@echo Command used to compile FILE.v :
	@echo "$(COQC) $(COQFLAGS) -dump-glob FILE.glob $(COQCFLAGS) FILE.v"
	@echo
	@echo Command used to compile FILE.ml :
	@echo "$(OCAMLOPT) -c $(COQSRC) $(PP) FILE.ml"
	@echo
	@echo Command used to bytecode-compile FILE.ml :
	@echo "$(OCAMLC) -c $(COQSRC) $(PP) FILE.ml"
	@echo
	@echo Realpath utility:
	@echo "$(REALPATH)"

-include $(DEPEND)
